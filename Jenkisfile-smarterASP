pipeline {
  agent { label 'win-dev' } // Windows 11 Jenkins agent
  options { disableConcurrentBuilds(); timestamps(); ansiColor('xterm') }

  parameters {
    // Build configuration
    string(name: 'CONFIGURATION', defaultValue: 'Release', description: 'Build configuration (Debug/Release)')

    // Smoke-test
    string(name: 'SMOKE_URLS', defaultValue: '/,/swagger', description: 'Comma-separated paths to test locally')

    // Deployment method
    choice(name: 'DEPLOY_METHOD', choices: ['WEBDEPLOY','FTP'], description: 'Choose deployment method')

    // Web Deploy info (from SmarterASP.NET control panel → VS WebDeploy)
    string(name: 'SITE_NAME', defaultValue: 'your-site-name', description: 'IIS Site name shown in control panel')
    string(name: 'WD_SERVER', defaultValue: 'webdeploy.smarterasp.net', description: 'Web Deploy server host')
    string(name: 'WD_PORT',   defaultValue: '8172', description: 'Web Deploy port (usually 8172)')

    // FTP fallback (from SmarterASP.NET control panel → FTP section)
    string(name: 'FTP_HOST',  defaultValue: 'ftp.smarterasp.net', description: 'FTP host')
    string(name: 'FTP_PATH',  defaultValue: '/wwwroot', description: 'Target folder for upload')

    // Local smoke-test port
    string(name: 'SMOKE_PORT', defaultValue: '5005', description: 'Port for local smoke test')
  }

  environment {
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE = '1'
    DOTNET_NOLOGO = '1'
    PUBLISH_DIR = "${env.WORKSPACE}\\publish"
    MSDEPLOY_EXE = 'C:\\Program Files\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe'
  }

  stages {

    // GIT CHECKOUT is handled by Jenkins job SCM configuration.
    stage('Restore & Build') {
      steps {
        bat '''
          @echo on
          where dotnet || (echo ERROR: .NET SDK not found & exit /b 1)

          for /f "usebackq delims=" %%f in (`powershell -NoP -C "(Get-ChildItem -Recurse -Filter *.csproj | Select-Object -First 1).FullName"`) do set CSPROJ=%%f
          if "%CSPROJ%"=="" (echo ERROR: No .csproj found & exit /b 1)
          echo Found project: %CSPROJ%

          dotnet restore "%CSPROJ%"
          dotnet build "%CSPROJ%" -c "%CONFIGURATION%"
        '''
      }
    }

    stage('Publish (Release folder)') {
      steps {
        bat '''
          if exist "%PUBLISH_DIR%" rmdir /s /q "%PUBLISH_DIR%"
          mkdir "%PUBLISH_DIR%"
          dotnet publish "%CSPROJ%" -c "%CONFIGURATION%" -o "%PUBLISH_DIR%" --no-build
          if %ERRORLEVEL% NEQ 0 exit /b %ERRORLEVEL%
          dir "%PUBLISH_DIR%"
        '''
        stash name: 'published', includes: 'publish/**'
      }
    }

    stage('Smoke-test (local run)') {
      steps {
        unstash 'published'
        powershell '''
          $ErrorActionPreference = "Stop"
          $pub = "$env:PUBLISH_DIR"
          $dll = Get-ChildItem -LiteralPath $pub -Filter *.dll | Where-Object { $_.Name -notmatch "test|xunit" } | Select-Object -First 1
          if (-not $dll) { throw "No DLL found in $pub" }

          $env:ASPNETCORE_URLS = "http://localhost:$($env:SMOKE_PORT)"
          $proc = Start-Process -FilePath "dotnet" -ArgumentList "`"$($dll.FullName)`"" -WorkingDirectory $pub -PassThru
          Set-Content "$env:WORKSPACE\\smoke.pid" $proc.Id

          # Wait for the app to respond
          $base = "http://localhost:$($env:SMOKE_PORT)"
          $deadline = (Get-Date).AddMinutes(2)
          while ((Get-Date) -lt $deadline) {
            try { Invoke-WebRequest -UseBasicParsing -Uri "$base/" -TimeoutSec 2 | Out-Null; break }
            catch { Start-Sleep -Milliseconds 500 }
          }

          # Probe multiple paths
          $ok = $false
          $paths = ($env:SMOKE_URLS -split ",") | ForEach-Object { $_.Trim() }
          foreach ($path in $paths) {
            try {
              $r = Invoke-WebRequest -UseBasicParsing -Uri ($base + $path)
              if ($r.StatusCode -ge 200 -and $r.StatusCode -lt 600) { $ok = $true; break }
            } catch {}
          }
          if (-not $ok) { throw "Smoke test failed at $base (paths: $($paths -join ', '))" }
          Write-Host "Smoke test passed at $base"
        '''
      }
      post {
        always {
          powershell '''
            if (Test-Path "$env:WORKSPACE\\smoke.pid") {
              $pid = Get-Content "$env:WORKSPACE\\smoke.pid"
              try { Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue } catch {}
              Remove-Item "$env:WORKSPACE\\smoke.pid" -Force -ErrorAction SilentlyContinue
            }
          '''
        }
      }
    }

    stage('Deploy') {
      steps {
        unstash 'published'
        script {
          if (params.DEPLOY_METHOD == 'WEBDEPLOY') {
            withCredentials([string(credentialsId: 'SMARTER_ACCOUNT', variable: 'SMARTER_ACCOUNT')]) {
              bat """
                @echo on
                if not exist "%MSDEPLOY_EXE%" (
                  echo ERROR: msdeploy not found at "%MSDEPLOY_EXE%"
                  echo Install Web Deploy 3.x on this agent.
                  exit /b 1
                )

                for /f "tokens=1,2 delims=:" %%a in ("%SMARTER_ACCOUNT%") do (
                  set WD_USER=%%a
                  set WD_PASS=%%b
                )
                if "%WD_USER%"=="" (echo ERROR: SMARTER_ACCOUNT must be 'username:password' & exit /b 1)

                set WD_URL=https://%WD_SERVER%:%WD_PORT%/MsDeploy.axd?site=%SITE_NAME%

                "%MSDEPLOY_EXE%" -verb:sync ^
                  -source:iisApp="%PUBLISH_DIR%" ^
                  -dest:iisApp="%SITE_NAME%",ComputerName="%WD_URL%",UserName="%WD_USER%",Password="%WD_PASS%",AuthType=Basic,IncludeAcls=False ^
                  -enableRule:AppOffline ^
                  -retryAttempts:5 -retryInterval:2000

                if %ERRORLEVEL% NEQ 0 exit /b %ERRORLEVEL%
              """
            }
          } else {
            withCredentials([string(credentialsId: 'SMARTER_ACCOUNT', variable: 'SMARTER_ACCOUNT')]) {
              bat """
                @echo on
                for /f "tokens=1,2 delims=:" %%a in ("%SMARTER_ACCOUNT%") do (
                  set FTP_USER=%%a
                  set FTP_PASS=%%b
                )
                if "%FTP_USER%"=="" (echo ERROR: SMARTER_ACCOUNT must be 'username:password' & exit /b 1)

                powershell -NoProfile -Command ^
                  "$ErrorActionPreference='Stop';" ^
                  "$pub='${env.PUBLISH_DIR}';" ^
                  "$uri='ftp://${params.FTP_HOST}${params.FTP_PATH.Replace('\\','/')}';" ^
                  "$cred=New-Object System.Net.NetworkCredential('%FTP_USER%','%FTP_PASS%');" ^
                  "Get-ChildItem -LiteralPath $pub -Recurse | Where-Object { -not $_.PsIsContainer } | ForEach-Object {" ^
                    "$rel=$_.FullName.Substring($pub.Length).Replace('\\','/');" ^
                    "$target=$uri + $rel;" ^
                    "$wc = New-Object System.Net.WebClient; $wc.Credentials=$cred; $wc.UploadFile([Uri]$target, 'STOR', $_.FullName) | Out-Null;" ^
                  "}"
              """
            }
          }
        }
      }
    }
  }

  post {
    success { echo '✅ Build, smoke-test, and deployment completed successfully.' }
    failure { echo '❌ Pipeline failed. See error logs above.' }
  }
}
