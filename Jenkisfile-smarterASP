pipeline {
  agent { label 'win-agent-1' }
  options { disableConcurrentBuilds(); timestamps(); ansiColor('xterm') }

  parameters {
    choice(name: 'DEPLOY_METHOD', choices: ['WebDeploy','FTP'], description: 'Choose how to deploy')
    // ---- WebDeploy ----
    string(name: 'WEBDEPLOY_URL',      defaultValue: 'https://publish.smarterasp.net:8172/msdeploy.axd?site=<your-site>', description: 'SmarterASP Web Deploy service URL')
    string(name: 'IIS_SITE_NAME',      defaultValue: '<your-site>', description: 'SmarterASP site/app name')
    string(name: 'WEBDEPLOY_CRED_ID',  defaultValue: 'smarterasp-webdeploy', description: 'Jenkins credential ID (Username/Password)')
    // ---- FTP/FTPS ----
    string(name: 'FTP_HOST',       defaultValue: 'ftp.smarterasp.net', description: 'FTP/FTPS host')
    string(name: 'FTP_DIR',        defaultValue: '/wwwroot',           description: 'Remote directory')
    booleanParam(name: 'FTPS',         defaultValue: true,  description: 'Use FTPS (Explicit TLS)')
    booleanParam(name: 'FTP_PASSIVE',  defaultValue: true,  description: 'Passive mode')
    string(name: 'FTP_CRED_ID',    defaultValue: 'smarterasp-ftp',     description: 'Jenkins credential ID (Username/Password)')
    // ---- Publish mode ----
    choice(name: 'PUBLISH_MODE', choices: ['FrameworkDependent','SelfContained-win-x86'], description: 'Publish style')
  }

  environment {
    PUBLISH_DIR = "${WORKSPACE}\\publish"
  }

  stages {
    stage('Build') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          $proj = Get-ChildItem -Recurse -Filter *.csproj |
                  Where-Object { $_.FullName -notmatch "(test|tests)\\" } |
                  Select-Object -First 1
          if (-not $proj) { throw "No .csproj found (excluding tests)" }

          dotnet --info | Out-Host
          dotnet restore $proj.FullName
          dotnet build   $proj.FullName -c Release --no-restore
        '''
      }
    }

    stage('Publish') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"

          if (Test-Path $env:PUBLISH_DIR) { Remove-Item -Recurse -Force $env:PUBLISH_DIR }
          New-Item -ItemType Directory -Force -Path $env:PUBLISH_DIR | Out-Null

          $proj = Get-ChildItem -Recurse -Filter *.csproj |
                  Where-Object { $_.FullName -notmatch "(test|tests)\\" } |
                  Select-Object -First 1
          if (-not $proj) { throw "No .csproj found (excluding tests)" }

          if ($env:PUBLISH_MODE -eq 'SelfContained-win-x86') {
            dotnet publish $proj.FullName -c Release -o $env:PUBLISH_DIR -r win-x86 --self-contained true /p:PublishSingleFile=false
          } else {
            dotnet publish $proj.FullName -c Release -o $env:PUBLISH_DIR --no-build
          }

          $dll = Get-ChildItem -Path $env:PUBLISH_DIR -Filter *.dll |
                 Where-Object { $_.Name -notmatch "(test|xunit)" } | Select-Object -First 1
          if (-not $dll) { throw "Publish produced no DLLs in $env:PUBLISH_DIR" }

          Write-Host "Publish OK â†’ $($env:PUBLISH_DIR)"
        '''
        stash name: 'publish-folder', includes: 'publish/**'
        archiveArtifacts artifacts: 'publish/**', fingerprint: true, onlyIfSuccessful: true
      }
    }

    stage('Deploy (WebDeploy)') {
      when { expression { params.DEPLOY_METHOD == 'WebDeploy' } }
      steps {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                          credentialsId: "${params.WEBDEPLOY_CRED_ID}",
                          usernameVariable: 'WD_USER',
                          passwordVariable: 'WD_PASS']]) {
          powershell '''
            $ErrorActionPreference = "Stop"

            # Resolve envs to normal PS vars (avoids $env:XYZ followed by ':' issues)
            $msd  = "C:\\Program Files\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe"
            if (-not (Test-Path $msd)) { throw "msdeploy.exe not found at '$msd'. Install Web Deploy 3.6+ on this agent." }

            $pub  = $env:PUBLISH_DIR
            $site = $env:IIS_SITE_NAME
            $url  = $env:WEBDEPLOY_URL
            $user = $env:WD_USER
            $pass = $env:WD_PASS

            $src  = "-source:contentPath=$pub"
            $dst  = "-dest:contentPath=$site,computerName=$url,userName=$user,password=$pass,authType=Basic,includeAcls=False"

            $args = @(
              '-verb:sync',
              $src,
              $dst,
              '-allowUntrusted',
              '-disableLink:AppPoolExtension',
              '-disableLink:ContentExtension',
              '-disableLink:CertificateExtension',
              '-retryAttempts:2',
              '-retryInterval:2000',
              '-verbose'
            )

            & $msd @args
          '''
        }
      }
    }

    stage('Deploy (FTP/FTPS)') {
      when { expression { params.DEPLOY_METHOD == 'FTP' } }
      steps {
        script {
          env.FTP_SECURE   = params.FTPS ? 'Explicit' : 'None'
          env.FTP_PASSIVE  = params.FTP_PASSIVE ? '1' : '0'
          env.TLS_INSECURE = params.FTPS ? 'false' : 'true'
        }
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
                          credentialsId: "${params.FTP_CRED_ID}",
                          usernameVariable: 'FTP_USER',
                          passwordVariable: 'FTP_PASS']]) {
          powershell '''
            $ErrorActionPreference = 'Stop'

            # Resolve envs to normal PS vars first
            $ftpHost = $env:FTP_HOST
            $ftpDir  = $env:FTP_DIR
            $pub     = $env:PUBLISH_DIR
            $user    = $env:FTP_USER
            $pass    = $env:FTP_PASS
            $secure  = $env:FTP_SECURE
            $passive = $env:FTP_PASSIVE
            $tlsInsec= $env:TLS_INSECURE

            # Load WinSCP .NET
            $winscpDlls = @(
              'C:\Program Files (x86)\WinSCP\WinSCPnet.dll',
              'C:\Program Files\WinSCP\WinSCPnet.dll'
            )
            $dll = $winscpDlls | Where-Object { Test-Path $_ } | Select-Object -First 1
            if (-not $dll) { throw 'WinSCP not found. Install WinSCP on the agent.' }
            Add-Type -Path $dll

            $sessionOptions = New-Object WinSCP.SessionOptions
            $sessionOptions.Protocol = [WinSCP.Protocol]::Ftp
            $sessionOptions.HostName = $ftpHost
            $sessionOptions.UserName = $user
            $sessionOptions.Password = $pass
            $sessionOptions.FtpSecure = [Enum]::Parse([WinSCP.FtpSecure], $secure)

            if ($tlsInsec -eq 'true') {
              $sessionOptions.GiveUpSecurityAndAcceptAnyTlsHostCertificate = $true
            }

            $transferOptions = New-Object WinSCP.TransferOptions
            $transferOptions.TransferMode = [WinSCP.TransferMode]::Binary

            $session = New-Object WinSCP.Session
            try {
              $session.Open($sessionOptions)
              $session.AddRawSettings('FtpPassive', $passive)

              $syncResult = $session.SynchronizeDirectories(
                [WinSCP.SynchronizationMode]::Remote,
                $pub,
                $ftpDir,
                $true
              )
              $syncResult.Check()
            }
            finally {
              $session.Dispose()
            }
            Write-Host 'FTP/FTPS deployment complete.'
          '''
        }
      }
    }
  }

  post {
    failure {
      powershell '''
        Write-Host "Last modified files under WORKSPACE:"
        Get-ChildItem -Recurse $env:WORKSPACE |
          Sort-Object LastWriteTime -Descending |
          Select-Object -First 50 FullName,Length,LastWriteTime |
          Format-Table -AutoSize | Out-Host
      '''
    }
  }
}
